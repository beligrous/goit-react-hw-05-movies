{"version":3,"file":"static/js/57.4182742e.chunk.js","mappings":"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","sources":["components/Modules/FilmList/FilmList.jsx","components/Pages/MoviesPage/MovieSearchPage/MovieSearchPage.jsx","service/api/getFilms.js"],"sourcesContent":["import { Link, useLocation } from 'react-router-dom';\nimport { PropTypes } from 'prop-types';\n\nfunction FilmList({ items, loading, error }) {\n  const location = useLocation();\n  const filmList = items.map(({ id, title }) => (\n    <li key={id}>\n      <Link state={{ from: location }} to={`/movies/${id}`}>\n        {title}\n      </Link>\n    </li>\n  ));\n\n  return (\n    <>\n      {loading && <p>please wait, loading...</p>}\n      <ul>{filmList}</ul>\n      {error && <p>{error}</p>}\n    </>\n  );\n}\n\nexport default FilmList;\n\nFilmList.propTypes = {\n  items: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n    })\n  ),\n};\n","import { useState, useEffect } from 'react';\nimport { useSearchParams, useLocation } from 'react-router-dom';\nimport { getFilmSearch } from 'service/api/getFilms';\nimport FilmList from 'components/Modules/FilmList/FilmList';\n\nfunction MovieSearchPage() {\n  const [items, setItems] = useState([]);\n  const [q, setQ] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [searchParams, setSearchParams] = useSearchParams({ search: '' });\n  const search = searchParams.get('search');\n  const SearchInfo = useLocation();\n\n  useEffect(() => {\n    setQ(SearchInfo.search.replace('?search=', ''));\n    const fetchFilm = async () => {\n      setLoading(true);\n      try {\n        const data = await getFilmSearch(search);\n        setItems(data);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n    if (search) {\n      fetchFilm();\n    }\n  }, [search, SearchInfo]);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    setSearchParams({ search: q });\n  };\n\n  return (\n    <>\n      <form onSubmit={handleSubmit}>\n        <label>\n          <input\n            type=\"text\"\n            required\n            value={q}\n            onChange={e => setQ(e.target.value)}\n          />\n        </label>\n        <button type=\"submit\">Search</button>\n      </form>\n      <FilmList items={items} loading={loading} error={error} />\n    </>\n  );\n}\n\nexport default MovieSearchPage;\n\nMovieSearchPage.defaultProps = {\n  items: [],\n};\n","import axios from 'axios';\n\nconst instance = axios.create({\n  baseURL: 'https://api.themoviedb.org/3/',\n  params: {\n    api_key: 'c23d7755b502540a74ef819e02a6a593',\n    language: 'en-US',\n  },\n});\n\nexport async function getFilms(page = 1) {\n  const { data } = await instance.get('/trending/movie/week', { page });\n  return data;\n}\n\nexport async function getFilmById(id) {\n  const { data } = await instance.get(`/movie/${id}`);\n  return data;\n}\n\n// export async function getFilmSearch(search) {\n//   const { data } = await instance.get(`/search/movie/?query=${search}`);\n//   return data;\n// }\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nconst KEY = 'c23d7755b502540a74ef819e02a6a593';\nconst page = 1;\n\nexport async function getFilmSearch(query) {\n  const r = await axios\n    .get(\n      `/search/movie?api_key=${KEY}&query=${query}&language=en-US&page=${page}`\n    )\n    .then(res => res.data);\n  return r.results;\n}\n\nexport async function getReviews(id) {\n  const { data } = await instance.get(`/movie/${id}/reviews`);\n  return data;\n}\n\nexport async function getCast(id) {\n  const { data } = await instance.get(`/movie/${id}/credits`);\n  return data;\n}\n"],"names":["items","loading","error","location","useLocation","filmList","map","id","title","state","from","to","MovieSearchPage","useState","setItems","q","setQ","setLoading","setError","useSearchParams","search","searchParams","setSearchParams","get","SearchInfo","useEffect","replace","fetchFilm","getFilmSearch","data","message","onSubmit","e","preventDefault","type","required","value","onChange","target","defaultProps","instance","axios","baseURL","params","api_key","language","getFilms","page","getFilmById","KEY","query","then","res","r","results","getReviews","getCast"],"sourceRoot":""}